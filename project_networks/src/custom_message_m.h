//
// Generated file, do not edit! Created by opp_msgtool 6.0 from custom_message.msg.
//

#ifndef __CUSTOM_MESSAGE_M_H
#define __CUSTOM_MESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class Custom_message;
/**
 * Class generated from <tt>custom_message.msg:19</tt> by opp_msgtool.
 * <pre>
 * //
 * // TODO generated message class
 * //
 * packet Custom_message
 * {
 *     \@customize(true);  // see the generated C++ header for more info
 *     char M_Header;
 *     string M_Payload;
 *     char M_Trailer;
 *     int M_Type;
 *     int M_Ack_Num;
 * }
 * </pre>
 *
 * Custom_message_Base is only useful if it gets subclassed, and Custom_message is derived from it.
 * The minimum code to be written for Custom_message is the following:
 *
 * <pre>
 * class Custom_message : public Custom_message_Base
 * {
 *   private:
 *     void copy(const Custom_message& other) { ... }

 *   public:
 *     Custom_message(const char *name=nullptr, short kind=0) : Custom_message_Base(name,kind) {}
 *     Custom_message(const Custom_message& other) : Custom_message_Base(other) {copy(other);}
 *     Custom_message& operator=(const Custom_message& other) {if (this==&other) return *this; Custom_message_Base::operator=(other); copy(other); return *this;}
 *     virtual Custom_message *dup() const override {return new Custom_message(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from Custom_message_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(Custom_message)
 * </pre>
 */
class Custom_message_Base : public ::omnetpp::cPacket
{
  protected:
    char M_Header = 0;
    omnetpp::opp_string M_Payload;
    char M_Trailer = 0;
    int M_Type = 0;
    int M_Ack_Num = 0;

  private:
    void copy(const Custom_message_Base& other);

  protected:
    bool operator==(const Custom_message_Base&) = delete;
    // make constructors protected to avoid instantiation
    // make assignment operator protected to force the user override it
    Custom_message_Base& operator=(const Custom_message_Base& other);

  public:
    virtual ~Custom_message_Base();
    Custom_message_Base(const char *name=nullptr, short kind=0);
    Custom_message_Base(const Custom_message_Base& other);
    virtual Custom_message_Base *dup() const override {
        return new Custom_message_Base(*this);
    }
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getM_Header() const;
    virtual void setM_Header(int M_Header);

    virtual const char * getM_Payload() const;
    virtual void setM_Payload(const char * M_Payload);

    virtual int getM_Trailer() const;
    virtual void setM_Trailer(int M_Trailer);

    virtual int getM_Type() const;
    virtual void setM_Type(int M_Type);

    virtual int getM_Ack_Num() const;
    virtual void setM_Ack_Num(int M_Ack_Num);
};


namespace omnetpp {

template<> inline Custom_message_Base *fromAnyPtr(any_ptr ptr) { return check_and_cast<Custom_message_Base*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __CUSTOM_MESSAGE_M_H
